{"version":3,"sources":["logo.svg","components/common/Navbar/Navbar.js","components/common/Jumbotron/Jumbotron.js","components/ComunicationComponent/ComunicationComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","Component","Jumbotron","cardClass","this","props","bg","color","title","content","Child","state","message","dispatchAlert","event","alert","setState","onClick","ComunicationComponent","child","React","createRef","handleClick","console","log","current","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,kNCiB5BC,E,uKAZX,OACE,yBAAKC,UAAU,wCACb,0BAAMA,UAAU,gBACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAD3C,0C,GAJaC,aCiBNC,E,uKAdX,IAAMC,EAAS,oCAAiCC,KAAKC,MAAMC,IAAX,aAAuBF,KAAKC,MAAMC,IAAnE,YAA6EF,KAAKC,MAAMC,IAAX,eAAyBF,KAAKC,MAAME,QAEhI,OACE,yBAAKV,UAAWM,GACd,yBAAKN,UAAU,aACb,wBAAIA,UAAU,aAAcO,KAAKC,MAAMG,OACvC,uBAAGX,UAAU,QAASO,KAAKC,MAAMI,e,GAVnBR,aCAlBS,E,4MACJC,MAAQ,CACNC,QAAS,Q,EAGXC,cAAgB,SAACC,GAAyC,IAAlCF,EAAiC,uDAAvB,mBAChCG,MAAMH,GACN,EAAKI,SAAS,CAAEJ,a,uDAIhB,OACE,6BACE,4BAAQf,UAAU,oBAAoBoB,QAASb,KAAKS,eAApD,SAA2ET,KAAKO,MAAMC,QAAtF,U,GAbYX,aA6CLiB,E,4MAzBbP,MAAQ,G,EACRQ,MAAQC,IAAMC,Y,EAEdC,YAAc,WACZC,QAAQC,IAAI,EAAKL,OACjB,EAAKA,MAAMM,QAAQZ,cAAc,KAAM,wB,uDAIvC,OACE,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,mBACA,wBAAIA,UAAU,iCAAd,6CACA,uBAAGA,UAAU,cACb,yBAAKA,UAAU,8BACb,4BAAQA,UAAU,uBAAuBoB,QAASb,KAAKkB,aAAvD,SACA,kBAAC,EAAD,CAAOI,IAAKtB,KAAKe,e,GAlBOlB,aCDrB0B,MAbf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWnB,MAAM,oCAAiCC,QAAQ,4EAAsEH,GAAG,UAAUC,MAAM,UACnJ,yBAAKV,UAAU,mBACb,kBAAC,EAAD,SCDY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMjC,c","file":"static/js/main.d6e5ba96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport logo from '../../../logo.svg'\n\nclass Navbar extends Component {\n  render() { \n    return (\n      <nav className=\"navbar fixed-top navbar-dark bg-dark\">\n        <span className=\"navbar-brand\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          Comunicación entre componentes\n        </span>\n      </nav>\n\n    )\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react'\n\nclass Jumbotron extends Component {\n\n  render() {\n\n    const cardClass = `jumbotron jumbotron-fluid ${ this.props.bg && `bg-${this.props.bg}` } ${ this.props.bg && `text-${this.props.color}` }` ;\n\n    return (\n      <div className={cardClass}>\n        <div className=\"container\">\n          <h1 className=\"display-4\">{ this.props.title }</h1>\n          <p className=\"lead\">{ this.props.content }</p>\n        </div>\n      </div>\n\n    )\n  }\n}\n \nexport default Jumbotron;","import React, { Component } from 'react'\n\nclass Child extends Component {\n  state = {\n    message: '****'\n  }\n\n  dispatchAlert = (event, message = 'Alert from child') => {\n    alert(message)\n    this.setState({ message })\n  }\n\n  render() { \n    return (\n      <div>\n        <button className='btn btn-secondary' onClick={this.dispatchAlert}>Hijo ({ this.state.message })</button>\n      </div>\n    )\n  }\n}\n\nclass ComunicationComponent extends Component {\n  state = {  }\n  child = React.createRef()\n\n  handleClick = () => {\n    console.log(this.child);\n    this.child.current.dispatchAlert(null, 'Hola desde el padre')\n  }\n\n  render() { \n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Hijo componente</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Usaremos el botón como componente hijo</h6>\n          <p className=\"card-text\"></p>\n          <div className='d-flex justify-content-end'>\n            <button className='btn btn-primary mr-2' onClick={this.handleClick}>Padre</button>\n            <Child ref={this.child}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ComunicationComponent;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Navbar from './components/common/Navbar';\nimport Jumbotron from './components/common/Jumbotron';\nimport ComunicationComponent from './components/ComunicationComponent';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Jumbotron title='Comunicación entre componentes' content='Se revisrá la comunicación entre los componentes sin usar las props' bg='primary' color='white'/>\n      <div className=\"container-fluid\">\n        <ComunicationComponent/>\n        {/*  */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}