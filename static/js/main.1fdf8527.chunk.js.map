{"version":3,"sources":["components/common/Navbar/Navbar.js","components/common/Jumbotron/Jumbotron.js","components/ChildComponent/ChildComponent.js","components/ParentComponent/ParentComponent.js","components/ObserverPattern/ObserverPattern.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Navbar","className","src","logo","alt","Component","Jumbotron","cardClass","this","props","bg","color","title","content","Child","state","message","dispatchAlert","event","alert","setState","onClick","ChildComponent","child","React","createRef","handleClick","console","log","current","ref","ComponentA","num","onAdd","ComponentB","ParentComponent","countA","countB","handleAddA","handleAddB","GrandChild","GreatGrandChild","PubSub","publish","subscribe","data","unsubscribe","ObserverPattern","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.1fdf8527.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport logo from '../../../logo.svg'\n\nclass Navbar extends Component {\n  render() { \n    return (\n      <nav className=\"navbar fixed-top navbar-dark bg-dark\">\n        <span className=\"navbar-brand\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          Comunicación entre componentes\n        </span>\n      </nav>\n\n    )\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react'\n\nclass Jumbotron extends Component {\n\n  render() {\n\n    const cardClass = `jumbotron jumbotron-fluid ${ this.props.bg && `bg-${this.props.bg}` } ${ this.props.bg && `text-${this.props.color}` }` ;\n\n    return (\n      <div className={cardClass}>\n        <div className=\"container\">\n          <h1 className=\"display-4\">{ this.props.title }</h1>\n          <p className=\"lead\">{ this.props.content }</p>\n        </div>\n      </div>\n\n    )\n  }\n}\n \nexport default Jumbotron;","import React, { Component } from 'react'\n\nclass Child extends Component {\n  state = {\n    message: '****'\n  }\n\n  dispatchAlert = (event, message = 'Alert from child') => {\n    alert(message)\n    this.setState({ message })\n  }\n\n  render() { \n    return (\n      <div>\n        <button className='btn btn-secondary' onClick={this.dispatchAlert}>Hijo ({ this.state.message })</button>\n      </div>\n    )\n  }\n}\n\nclass ChildComponent extends Component {\n  state = {  }\n  child = React.createRef()\n\n  handleClick = () => {\n    console.log(this.child);\n    this.child.current.dispatchAlert(null, 'Hola desde el padre')\n  }\n\n  render() { \n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Hijo componente</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Usaremos el botón como componente hijo</h6>\n          <p className=\"card-text\"></p>\n          <div className='d-flex justify-content-end'>\n            <button className='btn btn-primary mr-2' onClick={this.handleClick}>Padre</button>\n            <Child ref={this.child}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChildComponent;","import React, { Component } from 'react'\n\nclass ComponentA extends Component {\n  state = {  }\n  render() {\n    \n    const { num } = this.props\n\n    return (\n      <div className='card bg-primary text-white p-5'>\n        <h5>Componente A</h5>\n        <button className='btn btn-light' onClick={ this.props.onAdd }>\n          ( { num } )\n        </button>\n      </div>\n    )\n  }\n}\n\nclass ComponentB extends Component {\n  state = {  }\n  render() {\n\n    const { num } = this.props\n\n    return (\n      <div className='card bg-success text-white p-5'>\n        <h5>Componente B</h5>\n        <button className='btn btn-light' onClick={ this.props.onAdd }>\n          ( { num } )\n        </button>\n      </div>\n    )\n  }\n}\n\nclass ParentComponent extends Component {\n  state = {\n    countA: 0,\n    countB: 0\n  }\n\n  handleAddA = () => {\n    this.setState(state => ({\n      countA: state.countA + 1\n    }))\n  }\n\n  handleAddB = () => {\n    this.setState(state => ({\n      countB: state.countB + 2\n    }))\n  }\n\n  render() {\n\n    const { countA, countB } = this.state\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Componentes hermanos</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Comunicación entre componentes hermanos (Parent components)</h6>\n          <p className=\"card-text\"></p>\n          <div className='d-flex justify-content-around'>\n            {/* <ComponentA num={countA} onAdd={this.handleAddA}/> */}\n            <ComponentA num={countA} onAdd={this.handleAddB}/>\n            {/* <ComponentB num={countB} onAdd={this.handleAddB}/> */}\n            <ComponentB num={countB} onAdd={this.handleAddA}/>\n            {/* Con esto se comunican entre componentes hermanos en el que se invierte los métodos (Parent component) */}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ParentComponent;","import React, { Component } from 'react'\nimport PubSub from 'pubsub-js'\n\nclass Child extends Component {\n  render() { \n    return (\n      <div className='card m-2 p-3 text-center'>\n        <p>Hijo</p>\n        <GrandChild/>\n      </div>\n    )\n  }\n}\n\nclass GrandChild extends Component {\n  render() { \n    return (\n      <div className='card m-2 p-3 text-center'>\n        <p>Nieto</p>\n        <GreatGrandChild/>\n      </div>\n    )\n  }\n}\n\nclass GreatGrandChild extends Component {\n  state = {\n    message: 'initial message'\n  }\n\n  componentDidMount() {\n    PubSub.subscribe('object-send', (event, data) => {\n      this.setState({\n        message: data.title\n      })\n    })\n  }\n\n  componentWillUnmount() {\n    PubSub.unsubscribe('object-send')\n  }\n\n  handleClick = () => {\n    PubSub.publish('greeting', 'Hola desde el bisnieto')\n  }\n\n  render() { \n    return (\n      <div className='card m-2 p-3 text-center'>\n        <p>Bisnieto</p>\n        <span className='text-muted'>{ this.state.message }</span>\n        <div className='d-flex justify-content-center'>\n          <button className='btn btn-info' onClick={this.handleClick}>Clic bisnieto</button>\n        </div>\n      </div> \n    )\n  }\n}\n\nclass ObserverPattern extends Component {\n  state = {  }\n\n  componentDidMount() {\n    PubSub.subscribe('greeting', (event, data) => {\n      alert('Padre: ' + data)\n    })\n  }\n\n  componentWillUnmount() {\n    PubSub.unsubscribe('greeting')\n  }\n\n  handleClick = () => {\n    PubSub.publish('object-send', {\n      title: 'Mensaje desde el padre'\n    })\n  }\n\n  render() { \n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Patrón Observador</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Veremos como usar Observer Pattern</h6>\n          <p className=\"card-text\">Hay tres formas comunes o usadas que son: PubSubJS, EventEmitter o MicroEvent.js. Usaremos <b>PubSubJS</b></p>\n          <p className='mt-3 text-center'>Padre</p>\n          <div className='d-flex justify-content-center'>\n            <button className='btn btn-info' onClick={this.handleClick}>Clic padre</button>\n          </div>\n          <Child/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ObserverPattern;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Navbar from './components/common/Navbar';\nimport Jumbotron from './components/common/Jumbotron';\nimport ChildComponent from './components/ChildComponent';\nimport ParentComponent from './components/ParentComponent';\nimport ObserverPattern from './components/ObserverPattern';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Jumbotron title='Comunicación entre componentes' content='Se revisará la comunicación entre los componentes sin usar las props' bg='primary' color='white'/>\n      <div className=\"container-fluid\">\n        <ChildComponent/>\n        {/* Usaremos el botón como componente hijo (Padre a hijo)*/}\n        <ParentComponent/>\n        {/* Implementando parent component (Componentes hermanos) */}\n        <ObserverPattern/>\n        {/* Hay tres formas comunes o usadas que son: PubSubJS, EventEmitter o MicroEvent.js. Usaremos PubSubJS (cualquiera)*/}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}